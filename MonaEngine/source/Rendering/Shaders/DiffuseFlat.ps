#version 450 core 
layout (location = 3) uniform vec3 diffuseColor;
//Es importante notar que todas expresiones de la forma ${SOME_NAME} son reemplazadas antes de compilar
out vec4 color;

in vec3 normal;
in vec3 worldPos;

struct DirectionalLight {
	vec3 colorIntensity;
	vec3 direction;
};

struct PointLight {
	vec3 colorIntensity;
	vec3 position;
	float maxRadius;
};

struct SpotLight {
	vec3 colorIntensity; 
	float maxRadius;
	vec3 position; 
	float cosPenumbraAngle;
	vec3 direction;
	float cosUmbraAngle;
};

//Uniforme que contiene toda la informacion luminica de la escena
layout(std140, binding = 0) uniform Lights {
	SpotLight[${MAX_SPOT_LIGHTS}] spotLights;
	PointLight[${MAX_POINT_LIGHTS}] pointLights;
	DirectionalLight[${MAX_DIRECTIONAL_LIGHTS}] directionalLights;
	vec3 ambientLight;
	int spotLightsCount;
	int pointLightsCount;
	int directionalLightsCount;
};

//Calcula del decaimiento de la intensidad luminica dada la distancia a ella
// lightVector corresponde un vector que apunta desde la superficie iluminada a la fuente de luz
// lightRadius es el radio de fuente de luz
float GetDistanceAttenuation(vec3 lightVector, float lightRadius)
{
	float squareDistance = dot(lightVector, lightVector);
	float squareRadius = lightRadius * lightRadius;
	//El factor de windowing permite que esta funcion retorne 1 para distancia igual a 0 y 0 para distancia igual al rango de la luz
	float windowing = pow(max(1.0 - pow(squareDistance/squareRadius,2.0f),0.0f),2.0f);
	float distanceAttenuation = windowing * (1 / (squareDistance + 1));
	return distanceAttenuation;
}

//Calcula del decaimiento de la intansidad luminica dada una diferencia angular a ella
//normalizedLightVector es una vector normalizado que apunta desde la fuente a la superficie iliminada
//lightDirection corresponde a la direccion de la fuente tipo spotlight
//Para angulos menores al angulo de umbra la funcion retorna 1
//Para angulos mayores al angulo de penumbra la funcion retorna 0
//Para el resto de los casos la funcion retorna valores entre 1 y 0.
float GetAngularAttenuation(vec3 normalizedLightVector, vec3 lightDirection, float lightCosUmbraAngle, float lightCosPenumbraAngle)
{
	float cosSurfaceAngle = dot(lightDirection, normalizedLightVector);
	float t = clamp((cosSurfaceAngle - lightCosUmbraAngle) / (lightCosPenumbraAngle - lightCosUmbraAngle), 0.0f, 1.0f);
	float angularAttenuation = t*t;
	return angularAttenuation;
}

void main()
{
	vec3 ambient = ambientLight;
	vec3 norm = normalize(normal);
	//Valor que acumulara el aporte lum√≠nica de cada luz
	vec3 Lo = vec3(0.0f,0.0f,0.0f);

	//Iteracion sobre luces direccionales
	for(int i = 0; i < directionalLightsCount; i++){
		Lo += directionalLights[i].colorIntensity * max(dot(norm, -directionalLights[i].direction), 0.0);
	}
	
	//Iteracion sobre luces puntuales
	for(int i = 0; i < pointLightsCount; i++){
		vec3 lightVector = worldPos - pointLights[i].position;
		vec3 lightDir = normalize(worldPos - pointLights[i].position);
		float distanceAttenuation = GetDistanceAttenuation(lightVector, pointLights[i].maxRadius);
		Lo += distanceAttenuation * pointLights[i].colorIntensity * max(dot(norm, -lightDir), 0.0);
	}

	//Iteracion sobre luces de tipo spotlight
	for(int i = 0; i < spotLightsCount; i++){
		vec3 lightVector = worldPos - spotLights[i].position;
		vec3 lightDir = normalize(worldPos - spotLights[i].position);
		float distanceAttenuation = GetDistanceAttenuation(lightVector, spotLights[i].maxRadius);
		float angularAttenuation = GetAngularAttenuation(lightDir, spotLights[i].direction, spotLights[i].cosUmbraAngle, spotLights[i].cosPenumbraAngle);
		Lo += distanceAttenuation *  angularAttenuation * spotLights[i].colorIntensity * max(dot(norm, -lightDir), 0.0);
	}

	vec3 result = (ambient + Lo) * diffuseColor; 
	color = vec4(result, 1.0);
}


