#version 450 core 
//Es importante notar que todas expresiones de la forma ${SOME_NAME} son reemplazadas antes de compilar
layout (location = 3) uniform sampler2D albedoTexture;
layout (location = 4) uniform vec3 materialTint;
layout (location = 5) uniform sampler2D normalMapTexture;
layout (location = 6) uniform sampler2D metallicTexture;
layout (location = 7) uniform sampler2D roughnessTexture;
layout (location = 8) uniform sampler2D ambientOcclusionTexture;
layout (location = 9) uniform vec3 cameraPosition;

out vec4 color;

in vec3 worldPos;
in vec2 texCoord;
in vec3 normal;
in vec3 tangent;
in vec3 bitangent;

struct DirectionalLight {
	vec3 colorIntensity;
	vec3 direction;
};

struct PointLight {
	vec3 colorIntensity;
	vec3 position;
	float maxRadius;
};

struct SpotLight {
	vec3 colorIntensity; 
	float maxRadius;
	vec3 position; 
	float cosPenumbraAngle;
	vec3 direction;
	float cosUmbraAngle;
};

//Uniforme que contiene toda la informacion luminica de la escena
layout(std140, binding = 0) uniform Lights {
	SpotLight[${MAX_SPOT_LIGHTS}] spotLights;
	PointLight[${MAX_POINT_LIGHTS}] pointLights;
	DirectionalLight[${MAX_DIRECTIONAL_LIGHTS}] directionalLights;
	vec3 ambientLight;
	int spotLightsCount;
	int pointLightsCount;
	int directionalLightsCount;
};

const float PI = 3.14159265359;

//Calcula del decaimiento de la intensidad luminica dada la distancia a ella
// lightVector corresponde un vector que apunta desde la superficie iluminada a la fuente de luz
// lightRadius es el radio de fuente de luz
float GetDistanceAttenuation(vec3 lightVector, float lightRadius)
{
	float squareDistance = dot(lightVector, lightVector);
	float squareRadius = lightRadius * lightRadius;
	//El factor de windowing permite que esta funcion retorne 1 para distancia igual a 0 y 0 para distancia igual al rango de la luz
	float windowing = pow(max(1.0 - pow(squareDistance/squareRadius,2.0f),0.0f),2.0f);
	float distanceAttenuation = windowing * (1 / (squareDistance + 1));
	return distanceAttenuation;
}

//Calcula del decaimiento de la intansidad luminica dada una diferencia angular a ella
//normalizedLightVector es una vector normalizado que apunta desde la fuente a la superficie iliminada
//lightDirection corresponde a la direccion de la fuente tipo spotlight
//Para angulos menores al angulo de umbra la funcion retorna 1
//Para angulos mayores al angulo de penumbra la funcion retorna 0
//Para el resto de los casos la funcion retorna valores entre 1 y 0.
float GetAngularAttenuation(vec3 normalizedLightVector, vec3 lightDirection, float lightCosUmbraAngle, float lightCosPenumbraAngle)
{
	float cosSurfaceAngle = dot(lightDirection, normalizedLightVector);
	float t = clamp((cosSurfaceAngle - lightCosUmbraAngle) / (lightCosPenumbraAngle - lightCosUmbraAngle), 0.0f, 1.0f);
	float angularAttenuation = t*t;
	return angularAttenuation;
}


float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - min(cosTheta,1.0), 5.0);
}

// Cook-Torrance BRDF
//Brdf corresponde a la funcion de densidad de reflectancia bidereccional
vec3 GetBrdf(vec3 N, vec3 H, vec3 V, vec3 L, float roughness, vec3 albedo, float metallic, vec3 F0)
{
	float NDF = DistributionGGX(N, H, roughness);   
    float G   = GeometrySmith(N, V, L, roughness);      
    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);
	vec3 nominator    = NDF * G * F; 
    float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; // 0.001 to prevent divide by zero.
    vec3 specular = nominator / denominator;
	vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metallic;
	return (kD * albedo / PI + specular);
}

//Esta implementación esta basada principalmente en el articulo https://learnopengl.com/PBR/Theory y https://learnopengl.com/PBR/Lighting
void main()
{
	vec3 newNormal = normalize(normal);
	vec3 newTangent = normalize(tangent);
    vec3 newBitangent = normalize(bitangent);
	mat3 TBN = mat3(newTangent, newBitangent, newNormal);
	vec3 N = texture(normalMapTexture, texCoord).rgb;
	N = N * 2.0 - 1.0;   
	//Transformacion de la normal en espacio tangente a mundo
	N = normalize(TBN*N);

	vec3 V = normalize(cameraPosition - worldPos);
	//el valor de la textura se le debe aplicar una potencia para trabajar en espacio lineal
	//ya que estas se guardan en espacio gamma.
	vec3 albedo     = pow(texture(albedoTexture, texCoord).rgb, vec3(2.2));
    float metallic  = texture(metallicTexture, texCoord).r;
    float roughness = texture(roughnessTexture, texCoord).r;
    float ao        = texture(ambientOcclusionTexture, texCoord).r;
	
	vec3 ambient = ambientLight * albedo * ao;
	
	//Se usa un valor promedio de FO (factor de fresnel, reflecci�n con angulo de incidencia igual a 0) igual a 0.04 para dialectricos
	vec3 F0 = vec3(0.04);

	//Usamos las textura de metalicidad para interpolar entre F0 de dialectricos y el albedo
	//Generalmente esta textura tendra valores binarios 0 o 1.
	//Como los metales no tienen color difuso o albedo, se usa ese termino para caracterizar mejor F0 para los metales.
    F0 = mix(F0, albedo, metallic);

	//Valor que acumulara el aporte de cada luz
	vec3 Lo = vec3(0.0f,0.0f,0.0f);
	
	// En general, para fuentes sin area ni volumen, el valor total de Lo esta dado por
	// Lo = sum(Li * NdotL * brdf) sumando sobre todas las fuentes de luz
	// Donde Li a la radiancia de cada luz
	// NdotL el producto punto de la normal de la superficie iluminada y un vector apuntando a la luz.
	// Brdf corresponde a la funcion de densidad de reflectancia bidereccional

	for(int i = 0; i < directionalLightsCount; i++){
		vec3 L = -directionalLights[i].direction;
		vec3 H = normalize(V + L);

		vec3 radiance = directionalLights[i].colorIntensity;

		vec3 brdf = GetBrdf(N, H, V, L, roughness, albedo, metallic, F0);

        float NdotL = max(dot(N, L), 0.0);
		Lo += brdf * radiance * NdotL;
	}
	
	for(int i = 0; i < pointLightsCount; i++){
		vec3 lightVector = worldPos - pointLights[i].position;
		vec3 L = normalize(pointLights[i].position - worldPos);
		vec3 H = normalize(V + L);

		float distanceAttenuation = GetDistanceAttenuation(lightVector, pointLights[i].maxRadius);
		vec3 radiance  = distanceAttenuation * pointLights[i].colorIntensity;

		vec3 brdf = GetBrdf(N, H, V, L, roughness, albedo, metallic, F0);
        
		float NdotL = max(dot(N, L), 0.0);
		Lo += brdf * radiance * NdotL;
	}

	for(int i = 0; i < spotLightsCount; i++){
		vec3 lightVector = worldPos - spotLights[i].position;
		vec3 L = normalize(spotLights[i].position - worldPos);
		vec3 H = normalize(V + L);

		float distanceAttenuation = GetDistanceAttenuation(lightVector, spotLights[i].maxRadius);
		float angularAttenuation = GetAngularAttenuation(-L, spotLights[i].direction, spotLights[i].cosUmbraAngle, spotLights[i].cosPenumbraAngle);
		vec3 radiance = distanceAttenuation*angularAttenuation*spotLights[i].colorIntensity;
		
		vec3 brdf = GetBrdf(N, H, V, L, roughness, albedo, metallic, F0);

        float NdotL = max(dot(N, L), 0.0);
		Lo += brdf * radiance * NdotL;

	}
	

	vec3 finalColor = ambient + Lo;
	finalColor = finalColor/ (finalColor + vec3(1.0));
	finalColor = pow(finalColor, vec3(1.0/2.2));
	color = vec4(materialTint * finalColor, 1.0);
}